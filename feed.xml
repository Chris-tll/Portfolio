<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Christina Poguter</title>
    <link href="https://christinapoguter.netlify.app/feed.xml" rel="self" />
    <link href="https://christinapoguter.netlify.app" />
    <updated>2024-11-22T12:11:23+01:00</updated>
    <author>
        <name>Christina Poguter</name>
    </author>
    <id>https://christinapoguter.netlify.app</id>

    <entry>
        <title>MBOT-Projekt</title>
        <author>
            <name>Christina Poguter</name>
        </author>
        <link href="https://christinapoguter.netlify.app/mbot-projekt.html"/>
        <id>https://christinapoguter.netlify.app/mbot-projekt.html</id>

        <updated>2024-11-22T12:07:18+01:00</updated>
            <summary>
                <![CDATA[
                    MBot2 – Fernsteuerung und Automatisierung GitHub-Repository-Group-MBot2 Im Rahmen einer Gruppenarbeit haben wir eine Anwendung entwickelt, um den MBot2 von mBlock aus der Ferne zu steuern. Der Roboter verfügt über eine Vielzahl von Sensoren (z.B. Ultraschall-, Lichtsensor, Lagesensor) und kann über MicroPython programmiert werden. Unsere Anwendung&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3><strong>MBot2 – Fernsteuerung und Automatisierung</strong></h3>
<p><a href="https://github.com/orgs/Gruppe5HTL/repositories">GitHub-Repository-Group-MBot2</a></p>
<p>Im Rahmen einer Gruppenarbeit haben wir eine Anwendung entwickelt, um den <strong>MBot2</strong> von mBlock aus der Ferne zu steuern. Der Roboter verfügt über eine Vielzahl von Sensoren (z.B. Ultraschall-, Lichtsensor, Lagesensor) und kann über <strong>MicroPython</strong> programmiert werden. Unsere Anwendung ermöglicht es, den Roboter sowohl von einem <strong>PC</strong> als auch von einem <strong>mobilen Endgerät</strong> zu steuern. Die Steuerung erfolgt über ein WLAN-Netzwerk, wobei der Roboter sich automatisch mit dem Netzwerk verbindet und eine Verbindung zur Anwendung aufbaut.</p>
<hr>
<h5><strong>Wichtige Funktionen:</strong></h5>
<ul>
<li>Steuerung des MBots über <strong>PC</strong> und <strong>Handy</strong></li>
<li>Anzeige und regelmäßige Aktualisierung der Werte sämtlicher <strong>Sensoren und Aktoren</strong></li>
<li>Einstellbare <strong>Fahrgeschwindigkeit</strong> und Steuerbefehle wie vorwärts, rückwärts, links, rechts</li>
<li><strong>Suicide-Prevention</strong>-Feature zur Vermeidung von Kollisionen</li>
<li>Anzeige der <strong>IP-Adresse</strong> nach erfolgreicher WLAN-Verbindung</li>
<li><strong>Linienfolgemodus</strong>, bei dem der Roboter automatisch einer Linie folgt</li>
<li>Steuerung und Anpassung der <strong>LED-Farben</strong> des Robots über die Anwendung</li>
</ul>
<hr>
<h5><strong>Technische Details:</strong></h5>
<ul>
<li>Der Roboter nutzt <strong>MicroPython</strong> für die Programmierung, das über die <strong>cyberpi</strong>-Controllereinheit mit dem Roboter verbunden ist.</li>
<li>Die Kommunikation erfolgt über <strong>WLAN</strong>, wobei die Verbindung durch visuelle <strong>LED-Statusanzeigen</strong> des Controllers angezeigt wird (blau für Verbindungsaufbau, grün für erfolgreiche Verbindung, rot für Fehler).</li>
<li>Das System wurde nach den <strong>agilen Methoden (SCRUM)</strong> entwickelt, mit regelmäßigem Einsatz von <strong>Sprints</strong> und <strong>GitHub</strong> für die Quellcode- und Dokumentationsverwaltung.</li>
</ul>
<hr>
<h5><strong>Technologien:</strong></h5>
<ul>
<li><strong>MicroPython</strong> für die Programmierung des MBot2</li>
<li><strong>WLAN-Kommunikation</strong> zur Verbindung zwischen Roboter und Anwendung</li>
<li><strong>SCRUM</strong> für das agile Projektmanagement</li>
<li><strong>GitHub</strong> für Versionskontrolle und Dokumentation</li>
</ul>
<hr>
<h5><strong>Ziel des Projekts:</strong></h5>
<p><br>Das Ziel dieses Projekts war es, einen flexiblen, benutzerfreundlichen Steuerungsmechanismus für den MBot2 zu entwickeln, der sowohl auf <strong>PCs</strong> als auch auf <strong>mobilen Geräten</strong> funktioniert und verschiedene Funktionen wie automatische Steuerung und Sicherheitsfeatures bietet.</p>
<hr>
<h5><strong>Fazit:</strong></h5>
<p><br>Das Projekt war eine spannende Herausforderung, bei der wir die Anwendung zur Steuerung des <strong>MBot2</strong> erfolgreich entwickelt haben. Durch die Verwendung von <strong>MicroPython</strong> und die Implementierung von Funktionen wie der <strong>Suicide Prevention</strong> und dem <strong>Linienfolgemodus</strong> konnten wir sicherstellen, dass der Roboter sowohl sicher als auch effizient arbeitet. Die Verbindung zwischen dem Roboter und der Anwendung über <strong>WLAN</strong> funktionierte reibungslos, und die Steuerung von <strong>PC</strong> und <strong>Handy</strong> stellte sicher, dass der Roboter in verschiedenen Szenarien genutzt werden konnte. Das Projekt hat uns nicht nur in der Programmierung weitergebracht, sondern auch wertvolle Erfahrungen im <strong>agilen Projektmanagement</strong> und in der <strong>Teamarbeit</strong> vermittelt.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Wettbuero</title>
        <author>
            <name>Christina Poguter</name>
        </author>
        <link href="https://christinapoguter.netlify.app/wettbuero.html"/>
        <id>https://christinapoguter.netlify.app/wettbuero.html</id>

        <updated>2024-11-22T10:38:48+01:00</updated>
            <summary>
                <![CDATA[
                    Race Royal Bets – Das ultimative Wettbüro-Erlebnis GitHub-Repository-Wettbuero Race Royal Bets ist eine Plattform, auf der Nutzer auf verschiedene automatisierte Rennen wetten können. Die Renntypen umfassen Pferderennen, Schneckenrennen und Hunderennen. Die Rennen werden automatisch erstellt, sodass sich die Spieler ganz auf das Setzen ihrer Wetten&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3><strong>Race Royal Bets – Das ultimative Wettbüro-Erlebnis</strong></h3>
<p><a href="https://github.com/Chris-tll/Semester_Projekt_Wettbuero">GitHub-Repository-Wettbuero</a></p>
<p><br><strong>Race Royal Bets</strong> ist eine Plattform, auf der Nutzer auf verschiedene <strong>automatisierte Rennen</strong> wetten können. Die Renntypen umfassen <strong>Pferderennen</strong>, <strong>Schneckenrennen</strong> und <strong>Hunderennen</strong>. Die Rennen werden automatisch erstellt, sodass sich die Spieler ganz auf das Setzen ihrer Wetten und das Verfolgen der Rennen konzentrieren können. Das Projekt umfasst eine <strong>WPF-Anwendung</strong>, eine begleitende <strong>Website</strong> und eine <strong>Datenbank</strong>, die alle relevanten Daten für die Rennen und Wetten speichert.</p>
<hr>
<h5><strong>Projektinhalte und Aufgaben:</strong></h5>
<ul>
<li><strong>Technologien:</strong>
<ul>
<li><strong>WPF (Windows Presentation Foundation):</strong> Zum Entwickeln der Desktop-Anwendung für das Wettbüro.</li>
<li><strong>Datenbank:</strong> Speicherung von Renninformationen, Teilnehmern, Wett-Ergebnissen und Spielergebnissen.</li>
<li><strong>Website:</strong> Bereitstellung von allgemeinen Informationen und Updates zu bevorstehenden Rennen.</li>
</ul>
</li>
</ul>
<hr>
<h5><strong>Funktionen der WPF-Anwendung:</strong></h5>
<ul>
<li><strong>Automatisierte Rennen:</strong> Die Rennen (Pferderennen, Schneckenrennen und Hunderennen) werden automatisch generiert, einschließlich der Teilnehmer und deren Wahrscheinlichkeiten.</li>
<li><strong>Wettabgabe:</strong> Benutzer können auf die verschiedenen Teilnehmer (Pferde, Schnecken oder Hunde) setzen und ihre Wetten platzieren.</li>
<li><strong>Rennübersicht:</strong> Anzeige der bevorstehenden Rennen sowie eine detaillierte Übersicht über die Teilnehmer und die Wahrscheinlichkeiten jedes Rennens.</li>
<li><strong>Ergebnisse und Statistiken:</strong> Nach Abschluss jedes Rennens werden die Ergebnisse sofort angezeigt. Eine Rangliste hilft den Nutzern, ihre Wettstrategien zu verbessern.</li>
</ul>
<hr>
<h4><strong>Funktionen der Website:</strong></h4>
<ul>
<li><strong>Erklärung des Spiels:</strong> Die Website bietet eine klare Erklärung des Spiels und der Wettmöglichkeiten, damit neue Benutzer verstehen, wie das System funktioniert.</li>
<li><strong>Zukünftige Rennen:</strong> Eine Liste aller bevorstehenden Rennen wird angezeigt, damit Spieler im Voraus planen können, auf welche Rennen sie wetten möchten.</li>
<li><strong>Statistiken und Teilnehmer:</strong> Auf der Website gibt es eine Übersicht über die <strong>Teilnehmer</strong> der Rennen und deren vergangene Leistungen, um den Spielern bei ihren Wettentscheidungen zu helfen.</li>
</ul>
<hr>
<h4><strong>Technologien und Tools:</strong></h4>
<ul>
<li><strong>WPF (Windows Presentation Foundation):</strong> Für die Desktop-Anwendung</li>
<li><strong>Datenbank</strong>: Speicherung der Renn- und Wettinformationen (z.B. MySQL, PostgreSQL)</li>
<li><strong>HTML, CSS, JavaScript</strong>: Für die Website und deren Benutzeroberfläche</li>
<li><strong>SQL-Datenbank:</strong> Zur Verwaltung der Daten und Ergebnisse</li>
<li><strong>Visual Studio:</strong> Für die Entwicklung der Anwendung und die Datenbankintegration</li>
</ul>
<hr>
<h5><strong>Ziel des Projekts:</strong></h5>
<p>Das Ziel von <strong>Race Royal Bets</strong> war es, eine benutzerfreundliche und dynamische Wettplattform zu entwickeln, die es Spielern ermöglicht, auf unterschiedliche und interessante Rennarten zu wetten. Durch die Automatisierung der Rennsimulationen und eine intuitive Benutzeroberfläche wurde eine spannende Wettumgebung geschaffen. Das Projekt kombiniert <strong>Spieleentwicklung</strong>, <strong>Datenbankdesign</strong> und <strong>Benutzeroberflächen-Design</strong> zu einer kompletten Lösung für Wettliebhaber.</p>
<hr>
<h4><strong>Fazit:</strong></h4>
<p><strong>Race Royal Bets</strong> war ein herausforderndes, aber äußerst spannendes Projekt, bei dem ich viel über <strong>automatisierte Systeme</strong>, <strong>Wettmanagement</strong> und <strong>Datenbankdesign</strong> gelernt habe. Es hat mir gezeigt, wie man ein komplexes System entwickelt, das verschiedene Komponenten (wie eine Desktop-App, eine Website und eine Datenbank) miteinander kombiniert. Die positive Rückmeldung und die Erfahrung, ein so umfangreiches Projekt zu realisieren, waren sehr wertvoll für meine weitere Entwicklung als Entwickler.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Adventskalender</title>
        <author>
            <name>Christina Poguter</name>
        </author>
        <link href="https://christinapoguter.netlify.app/adventskalender.html"/>
        <id>https://christinapoguter.netlify.app/adventskalender.html</id>

        <updated>2024-11-22T09:36:14+01:00</updated>
            <summary>
                <![CDATA[
                    <p>Für dieses Projekt haben wir einen <strong>interaktiven Adventskalender</strong> in <strong>Java</strong> entwickelt, der es Nutzern ermöglicht, jeden Tag im Dezember ein neues "Türchen" zu öffnen und eine kleine Überraschung zu entdecken. Es war ein Schulprojekt, das wir über mehrere Monate hinweg im Rahmen unserer Ausbildung bearbeitet haben. Ziel war es, nicht nur ein funktionales Programm zu erstellen, sondern auch kreative Ideen umzusetzen und die Prinzipien der objektorientierten Programmierung zu vertiefen.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Für dieses Projekt haben wir einen <strong>interaktiven Adventskalender</strong> in <strong>Java</strong> entwickelt, der es Nutzern ermöglicht, jeden Tag im Dezember ein neues "Türchen" zu öffnen und eine kleine Überraschung zu entdecken. Es war ein Schulprojekt, das wir über mehrere Monate hinweg im Rahmen unserer Ausbildung bearbeitet haben. Ziel war es, nicht nur ein funktionales Programm zu erstellen, sondern auch kreative Ideen umzusetzen und die Prinzipien der objektorientierten Programmierung zu vertiefen.</p>
<hr>
<h4><strong>Projektinhalte und Herausforderungen:</strong></h4>
<ul>
<li><strong>Programmiersprache:</strong> Java (mit IntelliJ IDEA als IDE)</li>
<li><strong>Technologien:</strong> JavaFX für die Benutzeroberfläche, grundlegende Datenstrukturen zur Verwaltung der Türchen und Benutzerinteraktionen.</li>
<li><strong>Besondere Features:</strong>
<ul>
<li>Jeder Tag öffnet ein neues Fenster mit einem <strong>Rätsel</strong> oder einer <strong>Überraschung</strong> (z. B. kleine Scherzfragen, Witze oder Weihnachtsfakten).</li>
<li>Ein <strong>Wettbewerb</strong> zwischen den Schülern wurde veranstaltet, bei dem die drei beste Projekte einen Preis erhalten haben.</li>
<li>Besonders interessant war es, den Kalender <strong>skalierbar</strong> zu gestalten, sodass er auch nachträglich leicht angepasst werden kann (z. B. für andere Jahre oder mit zusätzlichen Funktionen).</li>
</ul>
</li>
</ul>
<hr>
<h4><strong>Projekterfahrung:</strong></h4>
<p>Das Projekt hat mir nicht nur geholfen, meine Kenntnisse in <strong>Java</strong> und <strong>JavaFX</strong> zu vertiefen, sondern auch meine Fähigkeiten im <strong>Teamwork</strong> und <strong>Projektmanagement</strong> weiter auszubauen. Die Herausforderung bestand darin, ein funktionales, benutzerfreundliches und gleichzeitig kreatives Projekt zu entwickeln – und das unter Zeitdruck!</p>
<p>Am Ende des Projekts nahmen wir an einem Wettbewerb teil, bei dem das beste Projekt prämiert wurde. Das Feedback war sehr positiv, und ich konnte wertvolle Erfahrungen sammeln, die mir bei zukünftigen Projekten sicher weiterhelfen werden.</p>
            ]]>
        </content>
    </entry>
</feed>
